# Simple MessageCraft Dockerfile
# Single-stage build for easier debugging and faster development

FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    nginx \
    supervisor \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy and install backend dependencies
COPY backend/requirements-clean.txt ./backend/
RUN pip install --no-cache-dir -r backend/requirements-clean.txt

# Copy backend code
COPY backend/ ./backend/

# Copy and install frontend dependencies
COPY frontend/package*.json ./frontend/
WORKDIR /app/frontend
RUN npm ci

# Copy frontend code and build
COPY frontend/ ./
RUN npm run build

# Back to main working directory
WORKDIR /app

# Copy configuration files
COPY frontend/nginx.conf /etc/nginx/sites-available/default
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Remove default nginx site
RUN rm -f /etc/nginx/sites-enabled/default && \
    ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/

# Create necessary directories
RUN mkdir -p /var/log/supervisor /var/log/nginx /app/logs /var/run/supervisor

# Create startup script
RUN echo '#!/bin/bash\n\
echo "ðŸš€ Starting MessageCraft..."\n\
echo "âœ… Backend: Python/FastAPI"\n\
echo "âœ… Frontend: React/Nginx"\n\
/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose ports
EXPOSE 80 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start services
CMD ["/app/start.sh"]